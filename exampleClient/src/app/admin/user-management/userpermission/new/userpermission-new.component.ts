import { Component, OnInit, Inject } from '@angular/core';
import { ActivatedRoute,Router} from "@angular/router";
import { FormArray, FormBuilder, FormControl, Validators } from '@angular/forms';
import { MatDialogRef, MatDialog, MAT_DIALOG_DATA } from '@angular/material/dialog';

import { UserpermissionService } from '../userpermission.service';
import { IUserpermission } from '../iuserpermission';
import { BaseNewComponent, FieldType, PickerDialogService } from 'src/app/common/shared';
import { ErrorService } from 'src/app/core/services/error.service';
import { GlobalPermissionService } from 'src/app/core/services/global-permission.service';

import { PermissionService } from 'src/app/admin/user-management/permission/permission.service';
import { UserService } from 'src/app/admin/user-management/user/user.service';

@Component({
  selector: 'app-userpermission-new',
  templateUrl: './userpermission-new.component.html',
  styleUrls: ['./userpermission-new.component.scss']
})
export class UserpermissionNewComponent extends BaseNewComponent<IUserpermission> implements OnInit {
  
    title:string = "New Userpermission";
	constructor(
		public formBuilder: FormBuilder,
		public router: Router,
		public route: ActivatedRoute,
		public dialog: MatDialog,
		public dialogRef: MatDialogRef<UserpermissionNewComponent>,
		@Inject(MAT_DIALOG_DATA) public data: any,
		public pickerDialogService: PickerDialogService,
		public userpermissionService: UserpermissionService,
		public errorService: ErrorService,
		public permissionService: PermissionService,
		public userService: UserService,
		public globalPermissionService: GlobalPermissionService,
	) {
		super(formBuilder, router, route, dialog, dialogRef, data, pickerDialogService, userpermissionService, errorService);
	}
 
		ngOnInit() {
		this.entityName = 'Userpermission';
		this.setAssociations();
		super.ngOnInit();
    	this.setForm();
		this.checkPassedData();
    }
 		
	setForm(){
 		this.itemForm = this.formBuilder.group({
      permissionId: ['', Validators.required],
      revoked: [false],
      userId: ['', Validators.required],
      permissionDescriptiveField: [''],
      userDescriptiveField: [''],
    });
    
    this.fields = [
              {
      		  name: 'revoked',
      		  label: 'revoked',
      		  isRequired: false,
      		  isAutoGenerated: false,
                type: FieldType.Boolean,
      	    },
		];
	}
	 
	setAssociations(){
  	
		this.associations = [
			{
				column: [
					{
						key: 'permissionId',
						value: undefined,
						referencedkey: 'id'
					},
					  
				],
				isParent: false,
				table: 'permission',
				type: 'ManyToOne',
				service: this.permissionService,
				label: 'permission',
				descriptiveField: 'permissionDescriptiveField',
				referencedDescriptiveField: 'displayName',
		    
			},
			{
				column: [
					{
						key: 'userId',
						value: undefined,
						referencedkey: 'id'
					},
					  
				],
				isParent: false,
				table: 'user',
				type: 'ManyToOne',
				service: this.userService,
				label: 'user',
				descriptiveField: 'userDescriptiveField',
				referencedDescriptiveField: 'userName',
		    
			},
		];
		this.parentAssociations = this.associations.filter(association => {
			return (!association.isParent);
		});

	}
	
	onSubmit() {
		let userpermission = this.itemForm.getRawValue();
		super.onSubmit(userpermission);
		
	}
    
}
