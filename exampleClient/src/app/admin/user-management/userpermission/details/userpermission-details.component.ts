import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from "@angular/router";
import { FormArray, FormBuilder, FormControl, Validators } from '@angular/forms';

import { MatDialog } from '@angular/material/dialog';

import { UserpermissionService } from '../userpermission.service';
import { IUserpermission } from '../iuserpermission';

import { BaseDetailsComponent, FieldType, PickerDialogService } from 'src/app/common/shared';
import { ErrorService } from 'src/app/core/services/error.service';
import { GlobalPermissionService } from 'src/app/core/services/global-permission.service';

import { PermissionService } from 'src/app/admin/user-management/permission/permission.service';
import { UserService } from 'src/app/admin/user-management/user/user.service';

@Component({
  selector: 'app-userpermission-details',
  templateUrl: './userpermission-details.component.html',
  styleUrls: ['./userpermission-details.component.scss']
})
export class UserpermissionDetailsComponent extends BaseDetailsComponent<IUserpermission> implements OnInit {
	title = 'Userpermission';
	parentUrl = 'userpermission';
	constructor(
		public formBuilder: FormBuilder,
		public router: Router,
		public route: ActivatedRoute,
		public dialog: MatDialog,
		public userpermissionService: UserpermissionService,
		public pickerDialogService: PickerDialogService,
		public errorService: ErrorService,
		public permissionService: PermissionService,
		public userService: UserService,
		public globalPermissionService: GlobalPermissionService,
	) {
		super(formBuilder, router, route, dialog, pickerDialogService, userpermissionService, errorService);
  }

	ngOnInit() {
		this.entityName = 'Userpermission';
		this.setAssociations();
		super.ngOnInit();
		this.setForm();
    	this.getItem();
	}
  
  setForm(){
    this.itemForm = this.formBuilder.group({
      permissionId: ['', Validators.required],
      revoked: [false],
      userId: ['', Validators.required],
      permissionDescriptiveField : [''],
      userDescriptiveField : [''],
      
    });
    
    this.fields = [
        {
		  name: 'revoked',
		  label: 'revoked',
		  isRequired: false,
		  isAutoGenerated: false,
          type: FieldType.Boolean,
	    },
      ];
      
  }
  
  onItemFetched(item: IUserpermission) {
    this.item = item;
     this.itemForm.patchValue(item);

  }
  
  setAssociations(){
    this.associations = [
      {
        column: [
	        {
	          key: 'permissionId',
	          value: undefined,
	          referencedkey: 'id'
			},
		],
		isParent: false,
		table: 'permission',
		type: 'ManyToOne',
		label: 'permission',
		service: this.permissionService,
		descriptiveField: 'permissionDescriptiveField',
	    referencedDescriptiveField: 'displayName',
		},
      {
        column: [
	        {
	          key: 'userId',
	          value: undefined,
	          referencedkey: 'id'
			},
		],
		isParent: false,
		table: 'user',
		type: 'ManyToOne',
		label: 'user',
		service: this.userService,
		descriptiveField: 'userDescriptiveField',
	    referencedDescriptiveField: 'userName',
		},
		];
		
		this.childAssociations = this.associations.filter(association => {
			return (association.isParent);
		});

		this.parentAssociations = this.associations.filter(association => {
			return (!association.isParent);
		});
	}
	
	onSubmit() {
		let userpermission = this.itemForm.getRawValue();
		super.onSubmit(userpermission);
		
	}
}
